// Generated by CoffeeScript 1.10.0
(function() {
  var Q, addressMarker, asserters, baseUrl, browseButtonSelector, browser, chai, chaiAsPromised, delay, errorDelay, pageTitle, personalisationButton, pollFreq, resetSession, searchButton, searchFieldPath, searchResultPath, serviceTreeItemSelector, should, toggleColourBlind, typeaheadResultPath, unitMarker, unitNamePopup, wd;

  Q = require('q');

  chai = require('chai');

  chaiAsPromised = require('chai-as-promised');

  chai.use(chaiAsPromised);

  should = chai.should();

  wd = void 0;

  browser = void 0;

  asserters = void 0;

  delay = 20000;

  errorDelay = 1000;

  pollFreq = 100;

  baseUrl = 'http://localhost:9001';

  pageTitle = 'Pääkaupunkiseudun palvelukartta';

  serviceTreeItemSelector = '#service-tree-container > ul > li';

  browseButtonSelector = '#browse-region';

  searchResultPath = '#navigation-contents li';

  searchButton = '#search-region > div > form > span.action-button.search-button > span';

  searchFieldPath = '#search-region > div > form > span:nth-of-type(1) > input';

  typeaheadResultPath = '#search-region span.twitter-typeahead span.tt-suggestions';

  toggleColourBlind = '#personalisation .accessibility-personalisation ul.personalisations li[data-type="colour_blind"]';

  personalisationButton = '#personalisation .personalisation-button';

  unitNamePopup = '.leaflet-popup-content > .unit-name';

  unitMarker = '.leaflet-marker-pane > .leaflet-marker-icon';

  addressMarker = '.leaflet-overlay-pane svg path.leaflet-clickable';

  resetSession = function(browser) {
    console.log("---###resetting session###---");
    browser.quit();
    return browser = browser.init({
      browserName: browser.browserTitle
    });
  };

  describe('Browser test', function() {
    before(function() {
      wd = this.wd;
      chaiAsPromised.transferPromiseness = wd.transferPromiseness;
      browser = this.browser;
      asserters = wd.asserters;

      /*browser.sessionCapabilities()
        .then (status) ->
          console.log status
       */
      return console.log(browser.browserTitle);
    });
    describe('Test navigation widget', function() {
      it('Title should become "Pääkaupunkiseudun palvelukartta"', function(done) {
        return browser.get(baseUrl).title().should.become(pageTitle).should.notify(done);
      });
      it('Should contain button "Selaa palveluita"', function(done) {
        return browser.waitForElementByCss(browseButtonSelector, delay, pollFreq).click().should.be.fulfilled.should.notify(done);
      });
      it('Should contain list item "Terveys"', function(done) {
        return browser.waitForElementByCss(serviceTreeItemSelector, asserters.textInclude('Terveys'), delay, pollFreq).should.be.fulfilled.should.notify(done);
      });
      return it('Should not contain list item "Sairaus"', function(done) {
        return browser.waitForElementByCss(serviceTreeItemSelector, asserters.textInclude('Sairaus'), errorDelay, pollFreq).should.be.rejected.should.notify(done);
      });
    });
    describe('Test look ahead', function() {
      it('Title should become "Pääkaupunkiseudun palvelukartta"', function(done) {
        return browser.get(baseUrl).title().should.become(pageTitle).should.notify(done);
      });
      return it('Should find item "Kallion kirjasto"', function(done) {
        var searchText;
        searchText = 'kallion kirjasto';
        return browser.waitForElementByCss(searchFieldPath, delay, pollFreq).click().type(searchText).waitForElementByCss(typeaheadResultPath, asserters.textInclude("Kallion kirjasto"), delay, pollFreq).should.be.fulfilled.should.notify(done);
      });
    });
    describe('Test search', function() {
      it('Title should become "Pääkaupunkiseudun palvelukartta"', function(done) {
        return browser.get(baseUrl).title().should.become(pageTitle).should.notify(done);
      });
      it('Should manage to input search text', function(done) {
        var searchText;
        searchText = 'kallion kirjasto';
        return browser.waitForElementByCss(searchFieldPath, delay, pollFreq).click().type(searchText).should.be.fulfilled.should.notify(done);
      });
      it('Should manage to click search button', function(done) {
        return browser.waitForElementByCss(searchButton, delay, pollFreq).click().should.be.fulfilled.should.notify(done);
      });
      it('Should find item "Kallion kirjasto"', function(done) {
        return browser.waitForElementByCss(searchResultPath, asserters.textInclude("Kallion kirjasto"), delay, pollFreq).should.be.fulfilled.should.notify(done);
      });
      return it('Should not find item "Kallio2n kirjasto"', function(done) {
        return browser.waitForElementByCss(searchResultPath, asserters.textInclude("Kallio2n kirjasto"), errorDelay, pollFreq).should.be.rejected.should.notify(done);
      });
    });
    return describe('Test embedding', function() {
      var containsBbox, containsPoint, embedUrl, isNearMapCenter, startEmbedTest;
      embedUrl = baseUrl + '/embed';
      isNearMapCenter = function(location, delta) {
        var MAP_CENTER, initialCenter, isNear, latIsNear, lngIsNear, subLat, subLng;
        if (delta == null) {
          delta = 1e-4;
        }
        MAP_CENTER = 'app.getRegion("map").currentView.map.getCenter()';
        initialCenter = {
          lat: MAP_CENTER + '.lat',
          lng: MAP_CENTER + '.lng'
        };
        isNear = (function(_this) {
          return function(x) {
            return 'Math.abs(' + x + ') < ' + delta;
          };
        })(this);
        subLat = initialCenter.lat + ' - ' + location.lat;
        latIsNear = isNear(subLat);
        subLng = initialCenter.lng + ' - ' + location.lng;
        lngIsNear = isNear(subLng);
        return latIsNear + " && " + lngIsNear;
      };
      containsBbox = function(bbox) {
        var BBOX_BOUNDS, MAP_BOUNDS;
        MAP_BOUNDS = 'app.getRegion("map").currentView.map.getBounds()';
        BBOX_BOUNDS = "new L.LatLngBounds( new L.LatLng(" + bbox.sw + "), new L.LatLng(" + bbox.ne + "))";
        return MAP_BOUNDS + ".contains(" + BBOX_BOUNDS + ")";
      };
      containsPoint = function(point) {
        var MAP_BOUNDS, POINT;
        MAP_BOUNDS = 'app.getRegion("map").currentView.map.getBounds()';
        POINT = "new L.LatLng(" + point.lat + ", " + point.lng + ")";
        return MAP_BOUNDS + ".contains(" + POINT + ")";
      };
      startEmbedTest = function(embed) {
        embed.map = embed.map || 'servicemap';
        it('Title should become "Pääkaupunkiseudun palvelukartta"', function(done) {
          return browser.get(embedUrl + embed.path).title().should.become(pageTitle).should.notify(done);
        });
        it('Should display map', function(done) {
          return browser.waitForElementByCssSelector('#map', asserters.isDisplayed, delay, pollFreq).should.notify(done);
        });
        it('Should use "' + embed.map + '" map layer', function(done) {
          return browser.waitForElementByCssSelector('#app-container.' + embed.map, asserters.isDisplayed, delay, pollFreq).should.notify(done);
        });
        it('Should not display navigation region', function(done) {
          return browser.waitForElementByCssSelector('#navigation-region', asserters.isNotDisplayed, delay, pollFreq).should.notify(done);
        });
        it('Should display zoom buttons', function(done) {
          return browser.waitForElementByCssSelector('.leaflet-control-zoom', asserters.isDisplayed, delay, pollFreq).should.notify(done);
        });
        return it('Should display logo', function(done) {
          return browser.waitForElementByCssSelector('.bottom-logo', asserters.isDisplayed, delay, pollFreq).should.notify(done);
        });
      };
      describe('Test embedded addresses', function() {
        var embeds;
        embeds = [
          {
            path: '/address/Espoo/Veräjäpellonkatu/15',
            location: {
              lat: 60.2257708,
              lng: 24.8041296
            },
            name: 'Veräjäpellonkatu 15, Espoo'
          }, {
            path: '/address/Espoo/Kamreerintie/3',
            location: {
              lat: 60.2042426,
              lng: 24.6560127
            },
            name: 'Kamreerintie 3, Espoo'
          }
        ];
        return embeds.map(function(embed) {
          describe(embed.path, function() {
            startEmbedTest(embed);
            it('Should display popup with correct street address', function(done) {
              return browser.get(embedUrl + embed.path).waitForElementsByCssSelector(unitNamePopup, asserters.isDisplayed, delay, pollFreq).then(function(els) {
                return should.equal(els.length, 1);
              }).text().should.become(embed.name).should.notify(done);
            });
            it('Should display one marker for address', function(done) {
              return browser.waitForElementsByCssSelector(addressMarker, asserters.isDisplayed, delay, pollFreq).then(function(els) {
                return should.equal(els.length, 1);
              }).should.notify(done);
            });
            return it('Should be centered to the address', function(done) {
              return browser.waitFor(asserters.jsCondition(isNearMapCenter(embed.location), delay, pollFreq)).should.notify(done);
            });
          });
        });
      });
      describe('Test embedded units', function() {
        var embeds;
        embeds = [
          {
            path: '/unit/41047',
            name: 'Uimastadion / Maauimala',
            location: {
              lat: 60.188812,
              lng: 24.930822
            }
          }, {
            path: '/unit/41047?bbox=60.18672,24.92038,60.19109,24.93742',
            name: 'Uimastadion / Maauimala',
            location: {
              lat: 60.188812,
              lng: 24.930822
            },
            bbox: {
              sw: '60.18672,24.92038',
              ne: '60.19109,24.93742'
            }
          }, {
            path: '/unit/40823',
            name: 'Kumpulan maauimala',
            location: {
              lat: 60.208702,
              lng: 24.958284
            }
          }, {
            path: '/unit/40823?bbox=60.20661,24.94783,60.21098,24.96489',
            name: 'Kumpulan maauimala',
            location: {
              lat: 60.208702,
              lng: 24.958284
            },
            bbox: {
              sw: '60.20661,24.94783',
              ne: '60.21098,24.96489'
            }
          }
        ];
        return embeds.map(function(embed) {
          describe(embed.path, function() {
            startEmbedTest(embed);
            it('Should display one marker icon', function(done) {
              return browser.waitForElementsByCssSelector(unitMarker, asserters.isDisplayed, delay, pollFreq).then(function(els) {
                return should.equal(els.length, 1);
              }).should.notify(done);
            });
            if (!embed.bbox) {
              return it('Should be centered to the unit', function(done) {
                return browser.waitFor(asserters.jsCondition(isNearMapCenter(embed.location)), delay, pollFreq).should.notify(done);
              });
            } else {
              it('Should contain unit location', function(done) {
                return browser.waitFor(asserters.jsCondition(containsPoint(embed.location)), delay, pollFreq).should.notify(done);
              });
              return it('Should contain bbox', function(done) {
                return browser.waitFor(asserters.jsCondition(containsBbox(embed.bbox)), delay, pollFreq).should.notify(done);
              });
            }
          });
        });
      });
      describe('Test embedded services', function() {
        var embeds;
        embeds = [
          {
            path: '/unit?service=25002&bbox=60.13744,24.77468,60.20935,25.04703&city=helsinki',
            bbox: {
              sw: '60.13744,24.77468',
              ne: '60.20935,25.04703'
            }
          }, {
            path: '/unit?service=25010&bbox=60.13744,24.77468,60.20935,25.04703&city=helsinki',
            bbox: {
              sw: '60.13744,24.77468',
              ne: '60.20935,25.04703'
            }
          }
        ];
        return embeds.map(function(embed) {
          describe(embed.path, function() {
            startEmbedTest(embed);
            it('Should have marker icons', function(done) {
              return browser.waitForElementsByCssSelector(unitMarker, delay, pollFreq).then(function(els) {
                return els.length.should.be.greaterThan(1);
              }).should.notify(done);
            });
            return it('Should contain the bbox', function(done) {
              return browser.waitFor(asserters.jsCondition(containsBbox(embed.bbox)), delay, pollFreq).should.notify(done);
            });
          });
        });
      });
      return describe('Test if personalisation choices affect embedded views', function() {
        var embed;
        after(function() {
          return resetSession(browser);
        });
        embed = {
          path: '/address/Espoo/Veräjäpellonkatu/15',
          location: {
            lat: 60.2257708,
            lng: 24.8041296
          },
          name: 'Veräjäpellonkatu 15, Espoo'
        };
        it('Should click personalisation button', function(done) {
          return browser.get(baseUrl).waitForElementByCssSelector(personalisationButton, delay, pollFreq).click().should.be.fulfilled.should.notify(done);
        });
        it('Should click accessibility personalisation "I have trouble distinguishing colours"', function(done) {
          return browser.waitForElementByCssSelector(toggleColourBlind, delay, pollFreq).click().should.be.fulfilled.should.notify(done);
        });
        it('Should change map layer to "accessible_map"', function(done) {
          return browser.waitForElementByCssSelector('.maplayer-accessible_map', asserters.isDisplayed, delay, pollFreq).should.notify(done);
        });
        return startEmbedTest(embed);
      });
    });
  });

}).call(this);

//# sourceMappingURL=promises-test.js.map
